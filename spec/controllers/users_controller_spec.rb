require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by the Rails when you ran the scaffold generator.

describe UsersController do
  render_views

  def mock_user(stubs={})
    @mock_user ||= mock_model(User, stubs).as_null_object
  end

  describe "GET index" do
    describe "for non-signed-in users" do
      it "should deny access" do
        get :index
        response.should redirect_to(signin_path)
      end
    end

    describe "for signed-in users" do
      before :each do
        @user = test_sign_in(Factory(:user))
        second = Factory(:user, :name => "Ion", :email => "ion@gmail.com")
        third = Factory(:user, :name => "Vasile", :email => "vasile@gmail.com")

        @users = [@user, second, third]
        16.times do
          @users << Factory(:user, :email => Factory.next(:email))
        end
      end

      it "should should be successful" do
        get :index
        response.should be_success
      end

      it "should have the right title" do
        get :index
        response.should have_selector("title", :content => "All users")
      end

      it "should have an element for all users" do
        get :index
        @users[0..2].each do |u|
          response.should have_selector("li", :content => u.name)
        end
      end

      it "should paginate user" do
        get :index
        response.should have_selector("div.pagination")
        response.should have_selector("span.disabled", :content => "Previous")
        response.should have_selector("a", :href => "/users?page=2", :content => "2")
        response.should have_selector("a", :href => "/users?page=2", :content => "Next")
      end

      it "should not have delete links" do
        get :index
        response.should_not have_selector("a", :content => "delete")
      end
    end

    describe "for admin user" do
      before :each do
        @user = test_sign_in(Factory(:user, :admin => true))
        @users = []
        16.times do
          @users << Factory(:user, :email => Factory.next(:email))
        end
      end

      it "should have delete link" do
        get :index
        response.should have_selector("a", :content => "delete")
      end
    end
  end

  describe "GET show" do
    before :each do
      @user = Factory(:user)
    end

    it "assigns the requested user as @user" do
      User.stub(:find).with("37") { mock_user }
      get :show, :id => "37"
      assigns(:user).should be(mock_user)
    end

    it "should be successful" do
      get :show, :id => @user
      response.should be_success
    end

    it "should have a profile image" do
      get :show, :id => @user
      response.should have_selector("h1>img", :class => "gravatar")
    end
  end

  describe "GET 'new'" do
    it "should be successful" do
      get :new
      response.should be_success
    end

    it "should have the right title" do
      get :new
      response.should have_selector('title', :content => "Sign up")
    end
  end

  describe "GET edit" do
    before :each do
      @user = Factory(:user)
      test_sign_in(@user)
    end

    it "should be successful" do
      get :edit, :id => @user
      response.should be_success
    end

    it "should have the right title" do
      get :edit, :id => @user
      response.should have_selector("title", :content => "Edit user")
    end

    it "should have a link to change the gravatar" do
      get :edit, :id => @user
      response.should have_selector("a", :href => "http://gravatar.com/emails", :content => "Change")
    end
  end

  describe "POST create" do
    describe "with invalid arguments" do
      before :each do
        @attr = {:name => "", :email => "", :password => "", :password_confirmation => ""}
      end

      it "should not create a user" do
        lambda do
          post :create, :user => @attr
        end.should_not change(User, :count)
      end

      it "should have a right title" do
        post :create, :user => @attr
        response.should have_selector("title", :content => "Sign up")
      end
    end

    describe "with valid arguments" do
      before :each do
        @attr = {:name => "test", :email => "testo@test.com", :password => "123456", :password_confirmation => "123456"}
      end

      it "should crate a new user" do
        lambda do
          post :create, :user => @attr
        end.should change(User, :count).by(1)
      end

      it "should sign the user in" do
        post :create, :user => @attr
        controller.should be_signed_in
      end
    end
  end

  describe "authentication of edit/update" do
    before :each do
      @user = Factory(:user)
    end

    describe "for non-signed-in users" do
      it "should deny access to user 'edit'" do
        get :edit, :id => @user
        response.should redirect_to(signin_path)
      end

      it "should deny access to user 'update'" do
        get :edit, :id => @user, :user => {}
        response.should redirect_to(signin_path)
      end
    end

    describe "for signed-in users" do
      before :each do
        @wrong_user = Factory(:user, :email => "user@example.net")
        test_sign_in(@user)
      end

      it "should require matching users for edit" do
        get :edit, :id => @wrong_user
        response.should redirect_to(root_path)
      end

      it "should require matching users for update" do
        get :update, :id => @wrong_user, :user => {}
        response.should redirect_to(root_path)
      end
    end
  end

  describe "DELETE destroy" do
    before(:each) do
      @user = Factory(:user)
    end

    describe "as a non-signed-in user" do
      it "should deny access" do
        delete :destroy, :id => @user
        response.should redirect_to(signin_path)
      end
    end

    describe "as a non-admin user" do
      it "should protect the page" do
        test_sign_in(@user)
        delete :destroy, :id => @user
        response.should redirect_to(root_path)
      end
    end

    describe "as an admin user" do

      before(:each) do
        @admin = Factory(:user, :email => "admin@example.com", :admin => true)
        test_sign_in(@admin)
      end

      it "should destroy the user" do
        lambda do
          delete :destroy, :id => @user
        end.should change(User, :count).by(-1)
      end

      it "should redirect to the users page" do
        delete :destroy, :id => @user
        response.should redirect_to(users_path)
      end

      it "should not be able to delete self" do
        lambda do
          delete :destroy, :id => @admin
        end.should_not change(User, :count)
      end
    end
  end
end
